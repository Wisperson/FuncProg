'''
Выполнил Артём Гудковский
'''


import time


def fibonacci():
    a = 0
    b = 1
    while True:
        yield a
        temp = a + b
        a = b
        b = temp


fib_gen = fibonacci()


def start():
    while True:
        time.sleep(1)
        print(next(fib_gen))


start()

'''
Принципы и техники продвинутой рекурсии:

Хвостовая рекурсия: Оптимизация рекурсивных функций, когда рекурсивный вызов является последней операцией перед возвратом значения. Это позволяет некоторым компиляторам или интерпретаторам оптимизировать код и избежать переполнения стека.
Мемоизация: Техника, при которой результаты вызовов функций кэшируются для последующего использования, чтобы избежать повторных вычислений.
Динамическое программирование: Использование результатов ранее решенных подзадач для решения более крупных задач, что может существенно снизить количество необходимых рекурсивных вызовов.
Комбинирование рекурсии с итерациями: Иногда лучше использовать комбинацию рекурсии и итераций для решения задачи.
Оптимизация рекурсивных функций для предотвращения переполнения стека:

Хвостовая рекурсия: Как упоминалось выше, организация кода таким образом, чтобы рекурсивный вызов был последней операцией перед возвратом значения.
Итерация вместо рекурсии: Некоторые алгоритмы, которые обычно реализуются с использованием рекурсии, могут быть переписаны в итеративном стиле.
Использование мемоизации и динамического программирования: Эти техники могут существенно сократить количество рекурсивных вызовов, снижая риск переполнения стека.
Функциональный паттерн декоратора в Python:

Декоратор - это функция, которая принимает другую функцию в качестве аргумента и возвращает новую функцию, обычно расширяя или изменяя поведение переданной функции без изменения её исходного кода.
Декораторы часто используются в Python для добавления дополнительной функциональности, такой как логирование, проверка аутентификации, кэширование и многое другое.
Преимущества ленивых вычислений в Python и их реализация:

Экономия ресурсов: Ленивые вычисления позволяют избегать лишних вычислений и сохранять память, особенно при работе с большими или бесконечными последовательностями.
Улучшенная производительность: Использование ленивых вычислений может снизить накладные расходы на вычисления в программе.
Удобство: Ленивые вычисления могут быть более удобными для работы с определенными структурами данных, такими как потоки данных или бесконечные последовательности.
Функциональный паттерн "Стратегия":

"Стратегия" - это паттерн проектирования, который позволяет определить семейство алгоритмов, инкапсулировать каждый из них и обеспечить их взаимозаменяемость.
Этот паттерн обычно реализуется с использованием интерфейса или абстрактного класса, определяющего методы для всех возможных стратегий, а затем создаются конкретные классы, реализующие эти методы для каждого алгоритма.

Сложности работы с рекурсией и их решения:

Переполнение стека: Рекурсивные вызовы могут привести к переполнению стека, особенно при работе с большими наборами данных. Решение этой проблемы может включать в себя оптимизацию кода, использование хвостовой рекурсии или переписывание алгоритма в итеративном стиле.
Производительность: Некоторые алгоритмы, написанные с использованием рекурсии, могут быть менее эффективными с точки зрения производительности по сравнению с итеративными аналогами. Решение может заключаться в выборе наиболее подходящего метода решения задачи для конкретной ситуации.
Сложность отладки: Рекурсивные функции могут быть сложными для отладки из-за их рекурсивной природы. Решение этой проблемы может включать в себя использование отладочных инструментов или добавление дополнительных выводов для отслеживания состояния вызовов.
Пример использования паттерна "Наблюдатель" в программировании:

"Наблюдатель" - это паттерн проектирования, который определяет отношение "один-ко-многим" между объектами, так что при изменении состояния одного объекта все зависимые от него объекты автоматически уведомляются и обновляются.
Пример использования "Наблюдателя" может быть в реализации паттерна MVC (Model-View-Controller), где модель (Model) уведомляет представление (View) о своих изменениях, чтобы оно могло обновиться и отобразить новое состояние.
Задачи, наиболее эффективно решаемые с помощью рекурсии:

Обход деревьев и графов: Рекурсия часто используется для обхода структур данных, таких как деревья и графы.
Вычисление факториала и чисел Фибоначчи: Эти задачи естественно решаются с использованием рекурсии.
Сортировка: Некоторые алгоритмы сортировки, такие как быстрая сортировка и сортировка слиянием, могут быть реализованы с использованием рекурсии.
Влияние рекурсии на производительность и использование памяти:

Рекурсия может быть менее эффективной с точки зрения производительности и использования памяти, чем итеративные аналоги, из-за накладных расходов на вызовы функций и управление стеком вызовов.
В случае переполнения стека из-за глубокой рекурсии, производительность программы может существенно снизиться, а в крайних случаях программа может завершиться аварийно.
Функциональные паттерны и их влияние на проектирование программного обеспечения:

Функциональные паттерны обеспечивают абстракции и шаблоны для решения типовых проблем в функциональном программировании.
Они способствуют повышению читаемости, модульности и переиспользования кода.
Применение функциональных паттернов позволяет разработчикам лучше структурировать свой код и создавать более гибкие и расширяемые системы.
'''
import random


# В задании написано "реализовать чистую функцию для фильтрации списка чисел"
# Принимает метод для фильтрации, и набор данных для фильтрации, изначальных данных не изменяет
def filtering(func, data):
    return list(filter(func, data))


random_numbers = [random.randint(0, 100) for _ in range(20)]

filtered_data = filtering(lambda x: x % 2 == 0, random_numbers)

# Та же функция, но без "обёртки"
filtered_data2 = list(filter(lambda x: x % 2 == 0, random_numbers))

print("Список случайных чисел: ", random_numbers)
print("Отфильтрованный список: ", filtered_data)
print("Отфильтрованный список: ", filtered_data2)

mytuple = (15, "gog.com", 34.5, 0.13, 'd')

'''
1. Чистая функция - функция без побочных эффектов и всегда выдающая один и тот же результат при
одинаковых входных данных. Под побочными эффектами имеется ввиду например изменение изначальных
наборов данных

2. Неизменяемость данных повышает предсказуемость кода, увеличивает сферу его применений в области
параллельных и асинхронных функций, упрощает взаимодействие с изначальным набором данных.

3. Функции высшего порядка в python либо принимают функции как аргумент, либо сами возвращают функцию
как результат.
def func1(a):
    def func2(b):
        return a*b
    return func2


a = func1(5)(5)             =25
func_mul_by_five = func1(5)
b = func_mul_by_five(7)     =35

4. Неизменяемые наборы данных - кортежи, строки, frozenset

5. Чистые функции решают проблемы: читаемости кода, параллельных задач, сложности тестирования,
безопасности

6. Чистые функции избегают излишнего взаимодействия с данными, более того, в силу их особенностей,
их выполнение можно поставить на параллельный поток и отложить их выполнение до момента, когда они
реально понадобятся

7. Побочные эффекты функции - влияние функцией на состояние программы в целом - изменение глобальных
переменных, изменение изначальных наборов данных и т.д. и т.п. Чистые функции связаны с побочными
эффектами в том смысле, что они ими не обладают

8. Функции высшего порядка вносят в код абстракцию, позволяя отделить и "спрятать" сложный код,
повышают переиспользование кода

9. Кортежи являются неизменяемым типом данных, что значит, что их можно только переопределить, но не
изменить

10. Неизменность изначальных данных, и осведомлённость программиста об этом, позволяет спокойно
запускать параллельные процессы на основе каких-то данных, не волнуясь о возможности наткнуться на
непредвиденный результат. Пример:
предположим, есть глобальная переменная x = 0, параллельными процессами мы считываем это число, локально
прибавляем к нему 1, и переприсваиваем его в качестве результата функции. Рано или поздно такая программа
столкнётся с проблемой, что два или более процесса прочитали одни и те же данные, и вернули одни и те
же данные - в результате - лишние вычисления, бесполезные. Если изначальные данные менять нельзя - так
происходить не будет
'''

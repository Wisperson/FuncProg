'''
def generate_permutations(arr):
    stack = [(list(arr), [])]
    while stack:
        current, permutation = stack.pop()
        if len(current) == 1:
            yield permutation + current
        else:
            for i in range(len(current)):
                remaining = current[:i] + current[i+1:]
                stack.append((remaining, permutation + [current[i]]))


input_array = [1, 2, 3]
print("Все перестановки введенного массива:")
gen = generate_permutations(input_array)
while True:
    try:
        perm = next(gen)
        print(perm)
    except StopIteration:
        break
'''


def permutations(arr):
    yield from permute(arr, 0)


def permute(arr, start):
    if start >= len(arr):
        yield arr[:]
        return
    for i in range(start, len(arr)):
        arr[start], arr[i] = arr[i], arr[start]
        yield from permute(arr, start + 1)
        arr[start], arr[i] = arr[i], arr[start]


arr = [1, 2, 3]
permuted_arrs = permutations(arr)

for item in permuted_arrs:
    print(item)




'''
Ленивые вычисления в Python - это подход, при котором вычисления выполняются только в момент,
когда результаты действительно нужны, а не заранее.
В Python ленивые вычисления обычно реализуются с использованием генераторов или выражений-генераторов.

Преимущества ленивых вычислений включают в себя:

Эффективное использование памяти, так как результаты вычислений не сохраняются заранее,
а генерируются по требованию.
Возможность работы с бесконечными последовательностями данных без необходимости хранения их
в памяти полностью.
Разница между строгими и ленивыми вычислениями заключается в том, что строгие вычисления выполняются
сразу, как только они вызываются, в то время как ленивые вычисления откладывают выполнение до момента,
когда результаты действительно нужны.

Сценарии использования ленивых вычислений:

Обработка больших файлов или потоков данных.
Работа с бесконечными последовательностями данных, например, генерация числовых рядов или потоков событий.
Оптимизация использования памяти при работе с большими наборами данных.
Ленивые вычисления могут повлиять на производительность программы, уменьшив использование
памяти и ускорив выполнение, особенно при работе с большими данными или бесконечными последовательностями.

Генераторы в Python - это специальный тип функций, которые используют ключевое слово yield
для возврата значений по мере необходимости.
Они связаны с ленивыми вычислениями, поскольку позволяют генерировать значения по требованию
без необходимости хранения всей последовательности в памяти.

Функциональные структуры данных в Python могут быть реализованы с использованием неизменяемых
типов данных, таких как кортежи или неизменяемые коллекции из модуля collections.
Например, неизменяемый список можно создать с помощью кортежа или типа данных namedtuple
из модуля collections.

Мемоизация - это техника оптимизации, которая заключается в сохранении результатов
предыдущих вычислений для повторного использования. В контексте ленивых вычислений мемоизация
может использоваться для кэширования результатов вычислений, чтобы избежать повторного выполнения
тех же вычислений при обращении к одним и тем же данным.

Недостатки ленивых вычислений могут включать в себя:

Дополнительные затраты на управление состоянием итераторов или генераторов.
Сложность отладки из-за неочевидного порядка выполнения операций.
Потенциальные проблемы с производительностью из-за накладных расходов на выполнение итераций 
или обработку исключений.
Пример реальной задачи, где можно было бы применить ленивые вычисления, - это обработка потока
событий в реальном времени, где данные поступают непрерывно и обработка их требует больших
вычислительных ресурсов. Использование ленивых вычислений позволило бы эффективно обрабатывать
эти данные по мере их поступления, минимизируя использование памяти и улучшая
производительность программы.
'''